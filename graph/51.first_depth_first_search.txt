
Problem Description :-

You are given N towns (1 to N). All towns are connected via unique directed path as mentioned in the input.

Given 2 towns find whether you can reach the first town from the second without repeating any edge.

B C : query to find whether B is reachable from C.

Input contains an integer array A of size N and 2 integers B and C ( 1 <= B, C <= N ).

There exist a directed edge from A[i] to i+1 for every 1 <= i < N. Also, it's guaranteed that A[i] <= i for every 1 <= i < N.

NOTE: Array A is 0-indexed. A[0] = 1 which you can ignore as it doesn't represent any edge.



Problem Constraints
1 <= N <= 100000



Input Format
First argument is vector A

Second argument is integer B

Third argument is integer C



Output Format
Return 1 if reachable, 0 otherwise.



Example Input
Input 1:

 A = [1, 1, 2]
 B = 1
 C = 2
Input 2:

 A = [1, 1, 2]
 B = 2
 C = 1


Example Output
Output 1:

 0
Output 2:

 1


Example Explanation
Explanation 1:

 Tree is 1--> 2--> 3 and hence 1 is not reachable from 2.
Explanation 2:

 Tree is 1--> 2--> 3 and hence 2 is reachable from 1.

==================================================================================================================================================================================
let A = [1, 1, 1, 3, 3, 2, 2, 7, 6];
let B = 9;
let C = 1;
let a = new Array(100005);
let vis = new Array(100005);

function solve(A, B, C) {
  let i,
    j,
    n = A.length;
  for (i = 0; i <= n; i++) {
    a[i] = [];
    vis[i] = 0;
  }

  for (i = 1; i < n; i++) {
    a[A[i]].push(i + 1);
  }
  let total_nodes = n + 1;
  if (dfs(total_nodes, a, C, B)) {
    return 1;
  }
  return 0;
}

let ans = solve(A, B, C);
console.log(ans);

function dfs(V, adj1, C, B) {
  function dfs1(node, adj, vis) {
    vis[node] = 1;
    for (const neighbor of adj[node]) {
      if (vis[neighbor] == 0) {
        dfs1(neighbor, adj, vis);
      }
    }
  }

  function isPathExist(V, adj, start, end) {
    const vis = Array(V).fill(0);

    dfs1(start, adj, vis);

    return vis[end] === 1;
  }

  const pathExists1 = isPathExist(V, adj1, C, B);
  return pathExists1 ? 1 : 0;
}
