Approach:-

Initial Configuration:-

1.Queue data structure: follows FIFO, and will always contain the starting.
2.Visited array: an array initialized to 0.
3.In BFS, we start with a “starting” node, mark it as visited, and push it into the queue data structure.
4.In every iteration, we pop out the node ‘v’ and put it in the solution vector/ARRAY, as we are traversing this node.
5.All the unvisited adjacent nodes from ‘v’ are visited next and are pushed into the queue. The list of adjacent neighbors of the node can be accessed from the adjacency list.
6.Repeat steps 2 and 3 until the queue becomes empty, and this way you can easily traverse all the nodes in the graph.
7.In this way, all the nodes are traversed in a breadthwise manner.


Time Complexity: O(N) + O(2E), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes.

Space Complexity: O(3N) ~ O(N), Space for queue data structure, visited array and an adjacency list

=====================================================================================================================================================================================

class Queue {
  constructor() {
    this.items = [];
  }
  // Enqueue: Add an element to the end of the queue
  enqueue(element) {
    this.items.push(element);
  }
  // Dequeue: Remove and return the front element of the queue
  dequeue() {
    if (this.isEmpty()) {
      return "Underflow";
    }
    return this.items.shift();
  }
  // Front: Return the front element of the queue without removing it
  front() {
    if (this.isEmpty()) {
      return "Queue is empty";
    }
    return this.items[0];
  }
  // isEmpty: Check if the queue is empty
  isEmpty() {
    return this.items.length === 0;
  }
  // size: Return the number of elements in the queue
  size() {
    return this.items.length;
  }
}

function bfsOfGraph(V, adj) {
  const vis = new Array(V).fill(0);
  vis[0] = 1;
  const queue = new Queue();
  //// Enqueue: Add an element to the end of the queue
  queue.enqueue(0);
  const bfs = [];

  while (!queue.isEmpty()) {
    // Dequeue: Remove and return the front element of the queue(same like shift)
    const node = queue.dequeue();
    bfs.push(node);
    const neighbors = adj[node];
    for (let i = 0; i < neighbors.length; i++) {
      const neighbor = neighbors[i];
      if (vis[neighbor]==0) {
        vis[neighbor] = 1;
        // Enqueue: Add an element to the end of the queue
        queue.enqueue(neighbor);
      }
    }
  }

  return bfs;
}

function addEdge(adj, u, v) {
  adj[u].push(v);
  adj[v].push(u);
}

function printAns(ans) {
  for (let i = 0; i < ans.length; i++) {
    console.log(ans[i] + " ");
  }
}

const adj = Array.from({ length: 6 }, () => []);

addEdge(adj, 0, 1);
addEdge(adj, 1, 2);
addEdge(adj, 1, 3);
addEdge(adj, 0, 4);

const ans = bfsOfGraph(5, adj);
printAns(ans);

// code main logic :

// function bfsOfGraph(V, adj) {
//     const vis = new Array(V).fill(0);
//     vis[0] = 1;
//     const queue = [];
//     queue.push(0);
//     const bfs = [];
//     while (queue.length !== 0) {
//       const node = queue.shift();
//       bfs.push(node);
//       for (const neighbor of adj[node]) {
//         if (!vis[neighbor]) {
//           vis[neighbor] = 1;
//           queue.push(neighbor);
//         }
//       }
//     }
//     return bfs;
//   }

//   function addEdge(adj, u, v) {
//     adj[u].push(v);
//     adj[v].push(u);
//   }

//   function printAns(ans) {
//     for (let i = 0; i < ans.length; i++) {
//       console.log(ans[i] + " ");
//     }
//   }

//   const adj = Array.from({ length: 6 }, () => []);

//   addEdge(adj, 0, 1);
//   addEdge(adj, 1, 2);
//   addEdge(adj, 1, 3);
//   addEdge(adj, 0, 4);

//   const ans = bfsOfGraph(5, adj);
//   printAns(ans);


============================================================================================