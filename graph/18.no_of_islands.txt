Problem Statement:

 Given a grid of size NxM (N is the number of rows and M is the number of columns in the grid) consisting of ‘0’s (Water) and ‘1’s(Land). Find the number of islands.

Note: An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Time Complexity ~ O(N² + NxMx9), N² for the nested loops, and NxMx9 for the overall DFS of the matrix, that will happen throughout if all the cells are filled with 1.

Space Complexity: O(N²) for visited array max queue space O(N²), If all are marked as 1 then the maximum queue space will be N².

=================================================================================================================================================================================================================================================================================
// all 8 directions : 
------------------------
class Node {
    constructor(data) {
      this.data = data;
      this.next = null;
    }
  }
  
  class LinkedListQueue {
    constructor() {
      this.front = null;
      this.rear = null;
      this.size = 0;
    }
  
    enqueue(item) {
      const newNode = new Node(item);
  
      if (this.isEmpty()) {
        this.front = newNode;
        this.rear = newNode;
      } else {
        this.rear.next = newNode;
        this.rear = newNode;
      }
  
      this.size++;
    }
  
    dequeue() {
      if (this.isEmpty()) {
        console.log("Queue is empty");
        return null;
      }
  
      const removedItem = this.front.data;
      this.front = this.front.next;
  
      if (this.front === null) {
        this.rear = null;
      }
  
      this.size--;
  
      return removedItem;
    }
  
    peek() {
      if (this.isEmpty()) {
        console.log("Queue is empty");
        return null;
      }
  
      return this.front.data;
    }
  
    isEmpty() {
      return this.size === 0;
    }
  
    getSize() {
      return this.size;
    }
  }
  
  const grid = [
    [1, 1, 0, 0, 0],
    [0, 1, 0, 0, 0],
    [1, 0, 0, 1, 1],
    [0, 0, 0, 0, 0],
    [1, 0, 1, 0, 1],
  ];
  
  console.log(numIslands(grid));
  
  function numIslands(grid) {
    const n = grid.length;
    const m = grid[0].length;
    const vis = [];
  
    for (let i = 0; i < n; i++) {
      vis[i] = Array(m).fill(0);
    }
  
    let cnt = 0;
  
    for (let row = 0; row < n; row++) {
      for (let col = 0; col < m; col++) {
        if (vis[row][col] == 0 && grid[row][col] == 1) {
          cnt++;
          bfs(row, col, vis, grid);
        }
      }
    }
  
    return cnt;
  }
  
  function bfs(ro, co, vis, grid) {
    vis[ro][co] = 1;
    const queue = new LinkedListQueue();
    queue.enqueue([ro, co]);
    const n = grid.length;
    const m = grid[0].length;
  
    while (!queue.isEmpty()) {
      const [row, col] = queue.dequeue();
  
      for (let delrow = -1; delrow <= 1; delrow++) {
        for (let delcol = -1; delcol <= 1; delcol++) {
          const nrow = row + delrow;
          const ncol = col + delcol;
  
          if (
            nrow >= 0 &&
            nrow < n &&
            ncol >= 0 &&
            ncol < m &&
            grid[nrow][ncol] == 1 &&
            vis[nrow][ncol] == 0
          ) {
            vis[nrow][ncol] = 1;
            queue.enqueue([nrow, ncol]);
          }
        }
      }
    }
  }
  


===============================================================================================
// only 4 -directions :  here also try using the queue class implementation  using the linked list .
----------------------------------
module.exports = { 
 //param A : array of array of integers
 //return an integer
	solve : function(A){
function Queue() {
  var a = [],
    b = 0;
  this.getLength = function () {
    return a.length - b;
  };
  this.isEmpty = function () {
    return 0 == a.length;
  };
  this.enqueue = function (b) {
    a.push(b);
  };
  this.dequeue = function () {
    if (a.length === 0) return undefined;
    const c = a[b++];
    if (2 * b >= a.length) {
      a = a.slice(b);
      b = 0;
    }
    return c;
  };

  this.peek = function () {
    return 0 < a.length ? a[b] : void 0;
  };
}

//   const grid = [
//     [1, 1, 0, 0, 0],
//     [0, 1, 0, 0, 0],
//     [1, 0, 0, 1, 1],
//     [0, 0, 0, 0, 0],
//     [1, 0, 1, 0, 1],
//   ];

const grid = A

return (numIslands(grid));
// Function to find the number of islands.
function numIslands(grid) {
  const n = grid.length;
  const m = grid[0].length;
  const vis = [];
  for (let i = 0; i < n; i++) {
    vis[i] = Array(m).fill(0);
  }

  let cnt = 0;

  for (let row = 0; row < n; row++) {
    for (let col = 0; col < m; col++) {
      // if not visited and is land
      if (vis[row][col] == 0 && grid[row][col] == 1) {
        cnt++;
        bfs(row, col, vis, grid);
      }
    }
  }

  return cnt;
}

function bfs(ro, co, vis, grid) {
  vis[ro][co] = 1;
  const queue = new Queue();
  queue.enqueue([ro, co]);
  const n = grid.length;
  const m = grid[0].length;

  // until the queue becomes empty
  while (queue.getLength() !== 0) {
    const [row, col] = queue.dequeue();

    // traverse in the neighbors and mark them if it's land
    for (let delrow = -1; delrow <= 1; delrow++) {
      for (let delcol = -1; delcol <= 1; delcol++) {
        if((delrow==-1 && delcol==0)||(delrow==0 && delcol==-1)||(delrow==1 && delcol==0)||(delrow==0 && delcol==1)){
            const nrow = row + delrow;
            const ncol = col + delcol;
    
            // check if neighbor row and column are valid and is an unvisited land
            if (
              nrow >= 0 &&
              nrow < n &&
              ncol >= 0 &&
              ncol < m &&
              grid[nrow][ncol] == 1 &&
              vis[nrow][ncol] == 0
            ) {
              vis[nrow][ncol] = 1;
              queue.enqueue([nrow, ncol]);
            }
        }
        
      }
    }
  }
}

	}
};


============================================================================