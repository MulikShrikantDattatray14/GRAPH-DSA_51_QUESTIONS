https://leetcode.com/problems/network-delay-time/description/

You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

 

Example 1:
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2

Example 2:
Input: times = [[1,2,1]], n = 2, k = 1
Output: 1


Example 3:
Input: times = [[1,2,1]], n = 2, k = 2
Output: -1
 

Constraints:-
1 <= k <= n <= 100
1 <= times.length <= 6000
times[i].length == 3
1 <= ui, vi <= n
ui != vi
0 <= wi <= 100
All the pairs (ui, vi) are unique. (i.e., no multiple edges.)

=================================================================================

function networkDelayTime(times, n, k) {
  const adj = [];
  for (let i = 0; i < n; i++) {
    adj.push([]);
  }

  for (let i = 0; i < times.length; i++) {
    const [start, end, cost] = times[i];
    adj[start - 1].push({ first: end - 1, second: cost });
  }

  const q = []; // normal queue
  q.push({
    steps_taken_till_current_node: 0,
    current_node: k - 1,
    total_time_till_current_node: 0,
  }); //[stop, start_node, distance]

  const dist = new Array(n).fill(1e9);
  // mark starting node as zero
  dist[k - 1] = 0;

  while (q.length > 0) {
    const it = q.shift();

    const steps = it.steps_taken_till_current_node;
    const node = it.current_node;
    const total_time = it.total_time_till_current_node;
    if (steps > n) continue; // Check if stops exceed number of nodes
    for (let i = 0; i < adj[node].length; i++) {
      const iter = adj[node][i];
      const adjNode = iter.first;
      const edW = iter.second;

      if (total_time + edW < dist[adjNode] && steps <= n) {
        // look for minimum distance
        dist[adjNode] = total_time + edW;
        q.push({
          steps_taken_till_current_node: steps + 1,
          current_node: adjNode,
          total_time_till_current_node: total_time + edW,
        });
      }
    }
  }

  let maxTime = -1;
  for (let i = 0; i < n; i++) {
    maxTime = Math.max(maxTime, dist[i]);
  }
  return maxTime === 1e9 ? -1 : maxTime;
}

// Example 1
const times1 = [
  [2, 1, 1],
  [2, 3, 1],
  [3, 4, 1],
];
const n1 = 4;
const k1 = 2;
console.log(networkDelayTime(times1, n1, k1)); // Output: 2

// Example 2
const times2 = [[1, 2, 1]];
const n2 = 2;
const k2 = 1;
console.log(networkDelayTime(times2, n2, k2)); // Output: 1

// Example 3
const times3 = [[1, 2, 1]];
const n3 = 2;
const k3 = 2;
console.log(networkDelayTime(times3, n3, k3)); // Output: -1


====================================================================================================================================================================