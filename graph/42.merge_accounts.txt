Problem Statement: 

Given a list of accounts where each element account [ i ] is a list of strings, where the first element account [ i ][ 0 ]  is a name, and the rest of the elements are emails representing emails of the account.

Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.

After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order.

Note: Accounts themselves can be returned in any order.

======================================================================================================================================================================================

class DisjointSet {
  constructor(n) {
    this.rank = Array(n + 1).fill(0);
    this.parent = Array.from({ length: n + 1 }, (_, i) => i);
    this.size = Array(n + 1).fill(1);
  }

  findUPar(node) {
    if (node === this.parent[node]) {
      return node;
    }
    const ulp = this.findUPar(this.parent[node]);
    this.parent[node] = ulp;
    return this.parent[node];
  }

  unionByRank(u, v) {
    const ulp_u = this.findUPar(u);
    const ulp_v = this.findUPar(v);
    if (ulp_u === ulp_v) return;
    if (this.rank[ulp_u] < this.rank[ulp_v]) {
      this.parent[ulp_u] = ulp_v;
    } else if (this.rank[ulp_v] < this.rank[ulp_u]) {
      this.parent[ulp_v] = ulp_u;
    } else {
      this.parent[ulp_v] = ulp_u;
      const rankU = this.rank[ulp_u];
      this.rank[ulp_u] = rankU + 1;
    }
  }

  unionBySize(u, v) {
    const ulp_u = this.findUPar(u);
    const ulp_v = this.findUPar(v);
    if (ulp_u === ulp_v) return;
    if (this.size[ulp_u] < this.size[ulp_v]) {
      this.parent[ulp_u] = ulp_v;
      this.size[ulp_v] += this.size[ulp_u];
    } else {
      this.parent[ulp_v] = ulp_u;
      this.size[ulp_u] += this.size[ulp_v];
    }
  }
}

function accountsMerge(details) {
  const n = details.length;
  const ds = new DisjointSet(n);
  const mapMailNode = new Map();
  for (let i = 0; i < n; i++) {
    for (let j = 1; j < details[i].length; j++) {
      // we are not start from j=0 , bxa we want to skip the name .
      const mail = details[i][j];
      if (!mapMailNode.has(mail)) {
        // make false ,true
        mapMailNode.set(mail, i);
      } else {
        ds.unionBySize(i, mapMailNode.get(mail));
      }
    }
  }

  const mergedMail = [];
  for (let i = 0; i < n; i++) {
    mergedMail.push([]);
  }

  for (const [mail, node] of mapMailNode.entries()) {
    // group as per the parents nodes, so get parent node and group all the nodes of that parent node
    const root = ds.findUPar(node);
    mergedMail[root].push(mail);
  }

  let ans = [];
  for (let i = 0; i < n; i++) {
    if (mergedMail[i].length === 0) continue;
    mergedMail[i].sort();
    const temp = [details[i][0], ...mergedMail[i]];
    ans.push(temp);
  }
  return ans;
}

const accounts = [
  ["John", "j1@com", "j2@com", "j3@com"],
  ["John", "j4@com"],
  ["Raj", "r1@com", "r2@com"],
  ["John", "j1@com", "j5@com"],
  ["Raj", "r2@com", "r3@com"],
  ["Mary", "m1@com"],
];

const result = accountsMerge(accounts);

for (const item of result) {
  console.log(`${item[0]}: ${item.slice(1).join(" ")}`);
}

//==================================================================