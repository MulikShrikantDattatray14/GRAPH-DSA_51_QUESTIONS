//The cycle in a graph starts from a node and ends at the same node. So we can think of two algorithms to do this, in this article we will be reading about the BFS, and in the next, we will be learning how to use DFS to check.

//Breadth First Search, BFS is a traversal technique where we visit the nodes level-wise, i.e., it visits the same level nodes simultaneously, and then moves to the next level.

//The intuition is that we start from a node, and start doing BFS level-wise, if somewhere down the line, we visit a single node twice, it means we came via two paths to end up at the same node. It implies there is a cycle in the graph because we know that we start from different directions but can arrive at the same node only if the graph is connected or contains a cycle, otherwise we would never come to the same node again.

//BFS :
let B = [
  [1, 2],
  [2, 3],
  [4, 5],
  [5, 6],
  [6, 4],
  [7, 8],
];
let A = 8; //1
// create a adjacentcy list
const adjList = [];
for (let i = 0; i <= A; i++) {
  adjList.push([]);
}

function Queue() {
  var a = [],
    b = 0;
  this.getLength = function () {
    return a.length - b;
  };
  this.isEmpty = function () {
    return 0 == a.length;
  };
  this.enqueue = function (b) {
    a.push(b);
  };
  this.dequeue = function () {
    if (a.length === 0) return undefined;
    const c = a[b++];
    if (2 * b >= a.length) {
      a = a.slice(b);
      b = 0;
    }
    return c;
  };

  this.peek = function () {
    return 0 < a.length ? a[b] : void 0;
  };
}

for (let i = 0; i < B.length; i++) {
  // You need to set values for u and v based on your requirements
  let val = B[i];
  const u = val[0];
  const v = val[1];
  adjList[u].push(v);
  adjList[v].push(u); // dont include this line for directed graph
}

//=======================================================================================================
let ans = isCycle(A, adjList);
if (ans) {
  console.log("1");
} else {
  console.log("0");
}

//==========================================================================================
function checkForCycle(adj, s, vis) {
  let q = new Queue();
  q.enqueue({ current: s, previous: -1 });
  vis[s] = true;
  while (q.getLength() > 0) {
    let { current: node, previous: parent } = q.dequeue(); //remove 1st
    // Using a normal for loop instead of for...of
    for (let adjacentNode of adj[node]) {
      if (!vis[adjacentNode]) {
        q.enqueue({ current: adjacentNode, previous: node });
        vis[adjacentNode] = true;
      } else if (vis[adjacentNode] == true && parent !== adjacentNode) {
        // parent koi aur hi hai .
        //parent !== adjacentNode means some other element who has difffernt parent has already visited it, by taking a different path.
        return true;
      }
    }
  }
  return false;
}
//=======================================================================================
function isCycle(V, adj) {
  let visited = new Array(V + 1).fill(false);
  // check foreach components in case of  multiple components
  for (let i = 1; i <= V; i++) {
    if (!visited[i]) {
      if (checkForCycle(adj, i, visited)) {
        return true;
      }
    }
  }
  return false;
}

==============================================================================================================
======================================================================================================================================================================================
//using DFS: 

// let B = [[1, 2]];
// let A = 2;//0
// let B = [[1, 2],[2,5],[2,6],[1,3],[3,4],[3,7],[7,8]];
//  let A = 8;//0

let B = [
  [1, 2],
  [2, 3],
  [4, 5],
  [5, 6],
  [4, 6],
  [7, 8],
];
let A = 8; //1
// Create an adjacency list
const adjList = [];
for (let i = 0; i <= A; i++) {
  adjList.push([]);
}

for (let i = 0; i < B.length; i++) {
  let val = B[i];
  const u = val[0];
  const v = val[1];
  adjList[u].push(v);
  adjList[v].push(u); // Don't include this line for a directed graph
}
const ans = isCycle(A, adjList);

if (ans) {
  console.log("1");
} else {
  console.log("0");
}

function dfs(node, parent, vis, adj) {
  vis[node] = 1;
  // Go to all adjacent nodes
  for (let i = 0; i < adj[node].length; i++) {
    const adjacentNode = adj[node][i];
    if (vis[adjacentNode] === 0) {
      if (dfs(adjacentNode, node, vis, adj)) {
        return true;
      }
    } else if (vis[adjacentNode] === 1 && adjacentNode !== parent) {
      return true;
    }
  }
  return false;
}

function isCycle(V, adj) {
  const vis = new Array(V + 1).fill(0);

  for (let i = 1; i <= V; i++) {
    if (vis[i] === 0) {
      if (dfs(i, -1, vis, adj)) {
        return true;
      }
    }
  }

  return false;
}


======================================================================================================================================================================================