Problem Statement:

 Given a matrix mat of size N x M where every element is either ‘O’ or ‘X’. Replace all ‘O’ with ‘X’ that is surrounded by ‘X’. An ‘O’ (or a set of ‘O’) is considered to be surrounded by ‘X’ if there are ‘X’ at locations just below, just above just left, and just right of it.

Time Complexity: O(N) + O(M) + O(NxMx4) ~ O(N x M), For the worst case, every element will be marked as ‘O’ in the matrix, and the DFS function will be called for (N x M) nodes and for every node, we are traversing for 4 neighbors, so it will take O(N x M x 4) time. Also, we are running loops for boundary elements so it will take O(N) + O(M).

Space Complexity ~ O(N x M), O(N x M) for the visited array, and auxiliary stack space takes up N x M locations at max. 

======================================================================================================================================================================================

const mat = [
  ["X", "X", "X", "X"],
  ["X", "O", "X", "X"],
  ["X", "O", "O", "X"],
  ["X", "O", "X", "X"],
  ["X", "X", "O", "O"],
];

const ans = fill(mat.length, mat[0].length, mat);
console.log(ans);

function fill(n, m, mat) {
  const delrow = [-1, 0, +1, 0];
  const delcol = [0, 1, 0, -1];
  // create a new visited matrix
  const vis = [];
  for (let i = 0; i < n; i++) {
    vis[i] = [];
    for (let j = 0; j < m; j++) {
      vis[i][j] = 0;
    }
  }
  // traverse  column
  for (let j = 0; j < m; j++) {
    // traverse first column
    if (vis[0][j] === 0 && mat[0][j] === "O") {
      dfs(0, j, vis, mat, delrow, delcol);
    }
    //// traverse last column
    if (vis[n - 1][j] === 0 && mat[n - 1][j] === "O") {
      dfs(n - 1, j, vis, mat, delrow, delcol);
    }
  }
  // traverse  row
  for (let i = 0; i < n; i++) {
    // traverse first row
    if (vis[i][0] === 0 && mat[i][0] === "O") {
      dfs(i, 0, vis, mat, delrow, delcol);
    }
    //   // traverse last row
    if (vis[i][m - 1] === 0 && mat[i][m - 1] === "O") {
      dfs(i, m - 1, vis, mat, delrow, delcol);
    }
  }
  // convert the remaining "0" which are not visited to "X"
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < m; j++) {
      if (vis[i][j] === 0 && mat[i][j] === "O") mat[i][j] = "X";
    }
  }

  return mat;
}

function dfs(row, col, vis, mat, delrow, delcol) {
  vis[row][col] = 1;
  const n = mat.length;
  const m = mat[0].length;

  for (let i = 0; i < 4; i++) {
    const nrow = row + delrow[i];
    const ncol = col + delcol[i];

    if (
      nrow >= 0 &&
      nrow < n &&
      ncol >= 0 &&
      ncol < m &&
      vis[nrow][ncol] === 0 &&
      mat[nrow][ncol] === "O"
    ) {
      dfs(nrow, ncol, vis, mat, delrow, delcol);
    }
  }
}


======================================================================================================================================================================================