
Problem Statement:

 There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi,weighti]  represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distance Threshold. You need to find out a city with the smallest number of cities that are reachable through some path and whose distance is at most Threshold Distance, If there are multiple such cities, our answer will be the city with the greatest number.

Note: that the distance of a path, connecting cities i and j are equal to the sum of the edges’ weights along that path.

Example 1:

Input Format: 
N=4, M=4, 
edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], 
distanceThreshold = 4

Result: 3
Explanation: 
The adjacent cities for each city at a distanceThreshold are =
City 0 →[City 1, City 2]
City 1 →[City 0, City 2, City 3]
City 2 →[City 0, City 1, City 3]
City 3 →[City 1, City 2]
Here, City 0 and City 3 have a minimum number of cities 
i.e. 2 within distanceThreshold. So, the result will be the 
city with the largest number. So, the answer is City 3.
Example 2:

Input Format: 
N=3, M=2, edges = [[0,1,3],[1,2,1]], distanceThreshold = 2

Result: 2
Explanation: 
City 1 → City 2,
City 2 → City 1
Hence, 2 is the answer.


=============================================================================================================================================================================
let n = 4;
let edges = [
  [0, 1, 3],
  [1, 2, 1],
  [1, 3, 4],
  [2, 3, 1],
];
let distanceThreshold = 4;
//Output: 3
let ans = findTheCity(n, edges, distanceThreshold);
console.log(ans);
function findTheCity(n, edges, distanceThreshold) {
  let dist = [];
  for (let i = 0; i < n; i++) {
    dist.push(new Array(n).fill(Number.MAX_VALUE));
  }
  // fill the dist matrix
  for (let i = 0; i < edges.length; i++) {
    let u = edges[i][0];
    let v = edges[i][1];
    let wt = edges[i][2];
    dist[u][v] = wt;
    dist[v][u] = wt;
  }
  let cityNo = findCity(n, edges.length, edges, distanceThreshold);
  return cityNo;

  function findCity(n, m, edges, distanceThreshold) {
    for (let i = 0; i < n; i++) {
      for (let j = 0; j < n; j++) {
        if (dist[i][j] === -1) {
          dist[i][j] = 1e9;
        }
        if (i === j) dist[i][j] = 0;
      }
    }

    for (let k = 0; k < n; k++) {
      // for each matrix iteration ,we will have only one node (K), through which all path passes.
      // k - passing through all the nodes
      for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
          dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
        }
      }
    }

    let cntCity = n; // initially keep it at maximum
    let cityNo = -1;
    for (let city = 0; city < n; city++) {
      let cnt = 0;
      for (let adjCity = 0; adjCity < n; adjCity++) {
        if (dist[city][adjCity] <= distanceThreshold) cnt++;
      }

      if (cnt <= cntCity) {
        cntCity = cnt;
        cityNo = city;
      }
    }
    return cityNo;
  }
}



==============================================================================================================================================================================