also know as Connected Components Problem.

Problem Statement: Given an undirected graph with V vertices. We say two vertices u and v belong to a single province if there is a path from u to v or v to u. Your task is to find the number of provinces.

Pre-req: Connected Components, Graph traversal techniques

example: 
input: (1,2),(2,3),(4,5),(5,6),(7,8)
output: 3



Approach:

A province is a group of directly or indirectly connected cities and no other cities outside of the group. Considering the above example, we can go from 1 to 2 as well as to 3, from every other node in a province we can go to each other. As we cannot go from 2 to 4 so it is not a province. We know about both the traversals, Breadth First Search (BFS) and Depth First Search (DFS). We can use any of the traversals to solve this problem because a traversal algorithm visits all the nodes in a graph. In any traversal technique, we have one starting node and it traverses all the nodes in the graph. Suppose there is an ‘N’ number of provinces so we need to call the traversal algorithm ‘N‘ times, i.e., there will be ‘N’ starting nodes. So, we just need to figure out the number of starting nodes.


The algorithm steps are as follows:

1.We need a visited array initialized to 0, representing the nodes that are not visited.
2.Run the for loop looping from 0 to N, and call the DFS for the first unvisited node. 
3.DFS function call will make sure that it starts the DFS call from that unvisited node, and visits all the nodes that are in that province, and at the same time, it will also mark them as visited. 
4.Since the nodes traveled in a traversal will be marked as visited, they will no further be called for any further DFS traversal. 
5.Keep repeating these steps, for every node that you find unvisited, and visit the entire province. 
6.Add a counter variable to count the number of times the DFS function is called, as in this way we can count the total number of starting nodes, which will give us the number of provinces.


Time Complexity: O(N) + O(V+2E), Where O(N) is for outer loop and inner loop runs in total a single DFS over entire graph, and we know DFS takes a time of O(V+2E). 

Space Complexity: O(N) + O(N),Space for recursion stack space and visited array.

========================================================================================
let V = 8;
const adj = [];
for (let i = 0; i <= 8; i++) {
  adj.push([]);
}

function addEdge(u, v) {
  adj[u].push(v);
  adj[v].push(u);
}

addEdge(1, 2);
addEdge(2, 3);
addEdge(4, 5);
addEdge(5, 6);
addEdge(7, 8);

const vis = new Array(V).fill(0);
let cnt = 0;
for (let i = 1; i <= V; i++) {
  // If the node is not visited
  if (vis[i] == 0) {
    // Counter to count the number of provinces
    cnt++;
    dfs(i, adj, vis);
  }
}
// dfs traversal function
function dfs(node, adj, vis) {
  // mark the node as visited
  vis[node] = 1;
  for (const neighbor of adj[node]) {
    if (vis[neighbor] == 0) {
      vis[neighbor] = 1;
      dfs(neighbor, adj, vis);
    }
  }
}
console.log(cnt);


=====================================================================================

//2nd way of input - adjacent matrix 
//(1-2)(2-3)(4-5)(5-6)(7-8)
const adj = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 1, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 1, 0, 0, 0, 0, 0],
  [0, 0, 1, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 1, 0, 0, 0],
  [0, 0, 0, 0, 1, 0, 1, 0, 0],
  [0, 0, 0, 0, 0, 1, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 1],
  [0, 0, 0, 0, 0, 0, 0, 1, 0],
]; //3
const V = adj.length;
//lets create adjacnecy list
const adjLs = [];
for (let i = 0; i <= V; i++) {
  adjLs.push([]);
}
// Convert adjacency matrix to adjacency list
for (let i = 1; i < V; i++) {
  for (let j = 1; j < V; j++) {
    // Self nodes are not considered
    if (adj[i][j] === 1) {
      adjLs[i].push(j);
      adjLs[j].push(i);
    }
  }
}
console.log(adjLs);
const vis = new Array(V).fill(0);
let cnt = 0;
for (let i = 1; i < V; i++) {
  // If the node is not visited
  if (vis[i] == 0) {
    // Counter to count the number of provinces
    cnt++;
    dfs(i, adjLs, vis);
  }
}
// dfs traversal function
function dfs(node, adj, vis) {
  // mark the node as visited
  vis[node] = 1;
  const neighbors = adj[node];
  for (let i = 0; i < neighbors.length; i++) {
    const neighbor = neighbors[i];
    if (vis[neighbor] == 0) {
      vis[neighbor] = 1;
      dfs(neighbor, adj, vis);
    }
  }
}
console.log(cnt);

=======================================================================
