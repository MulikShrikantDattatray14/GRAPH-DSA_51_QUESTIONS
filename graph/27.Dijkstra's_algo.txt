

Given a weighted, undirected, and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers where the first integer of each list j denotes there is an edge between i and j, second integers corresponds to the weight of that edge. You are given the source vertex S and You have to Find the shortest distance of all the vertex from the source vertex S. You have to return a list of integers denoting the shortest distance between each node and Source vertex S.

Note: The Graph doesn’t contain any negative weight cycle

============================================

// way -1 : 

//shortest distance from src to all nodes in the undirected graph .
// let A = 6;
// let B = [
//   [0, 4, 9],
//   [3, 4, 6],
//   [1, 2, 1],
//   [2, 5, 1],
//   [2, 4, 5],
//   [0, 3, 7],
//   [0, 1, 1],
//   [4, 5, 7],
//   [0, 5, 1],
// ];
// let C = 4;//D = [7, 6, 5, 6, 0, 6]

//================================================================
let A = 5;
let B = [
  [0, 3, 4],
  [2, 3, 3],
  [0, 1, 9],
  [3, 4, 10],
  [1, 3, 8],
];
let C = 4; //D = [14, 18, 13, 10, 0]
function Queue() {
  var a = [],
    b = 0;
  this.getLength = function () {
    return a.length - b;
  };
  this.isEmpty = function () {
    return 0 == a.length;
  };
  this.enqueue = function (b) {
    a.push(b);
  };
  this.dequeue = function () {
    if (a.length === 0) return undefined;
    const c = a[b++];
    if (2 * b >= a.length) {
      a = a.slice(b);
      b = 0;
    }
    return c;
  };

  this.peek = function () {
    return 0 < a.length ? a[b] : void 0;
  };
}

let m = B.length;
let adj = [];
for (let i = 0; i <= A; i++) {
  adj.push([]);
}

for (let i = 0; i < m; i++) {
  let [u, v, w] = B[i];
  adj[u].push([v, w]);
  adj[v].push([u, w]);
}

const n = A;

const edges = B;
let src = C;

// A dist array of size N initialised with a large number to
// indicate that initially all the nodes are untraversed.and this dist array will represent the shortest distance from source to all the nodes.
const dist = Array(n).fill(Number.MAX_SAFE_INTEGER);
// mark the distance of the starting node/ source as 0.
dist[src] = 0;
// BFS Implementation
const q = new Queue();
q.enqueue(src);
while (q.getLength() > 0) {
  let node = q.dequeue();
  for (let it of adj[node]) {
    let [adjnode, wt] = it;
    if (dist[node] + wt < dist[adjnode]) {
      //we want to maintain the minimum distance
      dist[adjnode] = wt + dist[node];
      q.enqueue(adjnode);
    }
  }
}
// Updated shortest distances are stored in the resultant array ‘ans’.
// Unreachable nodes are marked as -1.
for (let i = 0; i < n; i++) {
  if (dist[i] === Number.MAX_SAFE_INTEGER) {
    dist[i] = -1;
  }
}
console.log(dist);


///////////////////////////////////////////////////////////////////////
way-2 : dijkstra's algo :-

class MinHeap {
  constructor() {
    this.heap = [];
  }

  insert(element) {
    // here we are going from bottom to top
    this.heap.push(element);
    this.heapifyUp();
  }

  extractMin() {
    if (this.isEmpty()) {
      return null;
    }

    const min = this.heap[0];
    const lastElement = this.heap.pop();

    if (this.heap.length > 0) {
      this.heap[0] = lastElement;
      this.heapifyDown();
    }

    return min;
  }

  peek() {
    return this.isEmpty() ? null : this.heap[0];
  }

  isEmpty() {
    return this.heap.length === 0;
  }

  heapifyUp() {
    //here we are going from bottom to top
    let currentIndex = this.heap.length - 1; // bcz its a zero based index

    while (currentIndex > 0) {
      // till we reach the top
      const parentIndex = Math.floor((currentIndex - 1) / 2);
      if (this.heap[currentIndex].distance < this.heap[parentIndex].distance) {
        this.swap(currentIndex, parentIndex);
        currentIndex = parentIndex;
      } else {
        break;
      }
    }
  }

  heapifyDown() {
    // here we are going from top to bottom
    let currentIndex = 0;

    while (true) {
      const leftChildIndex = 2 * currentIndex + 1;
      const rightChildIndex = 2 * currentIndex + 2;
      let smallestChildIndex = currentIndex;

      if (
        leftChildIndex < this.heap.length &&
        this.heap[leftChildIndex].distance <
          this.heap[smallestChildIndex].distance
      ) {
        smallestChildIndex = leftChildIndex;
      }

      if (
        rightChildIndex < this.heap.length &&
        this.heap[rightChildIndex].distance <
          this.heap[smallestChildIndex].distance
      ) {
        smallestChildIndex = rightChildIndex;
      }

      if (smallestChildIndex !== currentIndex) {
        this.swap(currentIndex, smallestChildIndex);
        currentIndex = smallestChildIndex;
      } else {
        break;
      }
    }
  }

  swap(i, j) {
    const temp = this.heap[i];
    this.heap[i] = this.heap[j];
    this.heap[j] = temp;
  }
}

A = 6;
B = [
  [0, 4, 9],
  [3, 4, 6],
  [1, 2, 1],
  [2, 5, 1],
  [2, 4, 5],
  [0, 3, 7],
  [0, 1, 1],
  [4, 5, 7],
  [0, 5, 1],
];
C = 4;
// we assume the graph to always contain positive weights while using  Dijkstra’s Algorithm.
let m = B.length;
let adj = [];
for (let i = 0; i <= A; i++) {
  adj.push([]);
}

for (let i = 0; i < m; i++) {
  let [u, v, w] = B[i];
  adj[u].push([v, w]);
  adj[v].push([u, w]);
}

let V = A;

let visited = new Array(V + 1).fill(0);
let ans = dijkstra(V, adj, C);

function dijkstra(V, adj, S) {
  const pq = new MinHeap();
  const dist = new Array(V).fill(Number.MAX_SAFE_INTEGER);

  dist[S] = 0;
  pq.insert({ distance: 0, node: S });
  while (pq.isEmpty() === false) {
    const current = pq.extractMin(); // top
    const dis = current.distance;
    const node = current.node;

    if (visited[node] == 1) continue;
    visited[node] = 1;

    for (let i = 0; i < adj[node].length; i++) {
      const adjNode = adj[node][i][0];
      const edgeWeight = adj[node][i][1];
      if (dis + edgeWeight < dist[adjNode]) {
        dist[adjNode] = dis + edgeWeight;
        pq.insert({ distance: dist[adjNode], node: adjNode });
      }
    }
  }
  return dist;
}

let n = ans.length;
for (let i = 0; i < n; i++) {
  if (ans[i] == Number.MAX_SAFE_INTEGER) ans[i] = -1;
}
console.log(ans);

===============================================================================